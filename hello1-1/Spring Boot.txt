
1일차
정적 컨텐츠, MVC와 템플릿 엔진, API 크게 3가지로 나뉜다.
회원 도메인(DTO)과 리포지토리를 작성하고 테스트 케이스 까지 학습.
여러명이 개발을 할 때는 테스트 케이스 없이는 불가능하다. 매우 중요



2일차
스프링 빈 등록하는 2가지 방법

스프링 빈과 의존관계 주입(DI)
컨트롤러 통해서 외부 요청 받고 
서비스 통해서 비즈니스 로직 만들고
리포지토리에서 데이터 저장.

1.컴포넌트 스캔 과 자동 의존관계 설정
컨트롤러랑 서비스 연결 @AutoWired /  DI이다.

컴포넌트 스캔 원리
@Component 애노테이션이 있으면 스프링 빈으로 자동 등록된다.
@Controller 컨트롤러가 스프링 빈으로 자동 등록된 이유도 컴포넌트 스캔 때문이다.
@Component 를 포함하는 다음 애노테이션도 스프링 빈으로 자동 등록된다.
	@Controller
	@Service
	@Repository
ex)hello.hellospring 패키지 하위만 스프링이 뒤져서 등록

> 참고: 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록한다(유일하게 하나만
등록해서 공유한다) 따라서 같은 스프링 빈이면 모두 같은 인스턴스다. 설정으로 싱글톤이 아니게 설정할 수
있지만, 특별한 경우를 제외하면 대부분 싱글톤을 사용한다.

2.자바 코드로 직접 스프링 빈 등록하기

> 참고: DI에는 필드 주입, setter 주입, 생성자 주입 이렇게 3가지 방법이 있다. 의존관계가 실행중에
동적으로 변하는 경우는 거의 없으므로 생성자 주입을 권장한다

> 참고: 실무에서는 주로 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용한다. 
그리고 정형화 되지 않거나, 상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 스프링 빈으로
등록한다

주의: @Autowired 를 통한 DI는 helloController , memberService 등과 같이 스프링이 관리하는
객체에서만 동작한다. 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작하지 않는다.


3일차
데이터베이스와 연동하여 테스트 케이스 까지 진행

Jdbc리포지토리로 갈아끼움 (DataSource는 데이터베이스 커넥션을 획득할 때 사용하는 객체다. 스프링 부트는 데이터베이스 커넥션
정보를 바탕으로 DataSource를 생성하고 스프링 빈으로 만들어둔다. 그래서 DI를 받을 수 있다)

스프링의 DI (Dependencies Injection)을 사용하면 기존 코드를 전혀 손대지 않고, 설정만으로 구현
클래스를 변경할 수 있다.

데이터를 DB에 저장하므로 스프링 서버를 다시 실행해도 데이터가 안전하게 저장된다.

스프링 컨테이너와 DB까지 연결한 통합 테스트 진행.











